package com.expense.hibernate.domains;

// Generated Jul 14, 2013 4:30:53 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", uniqueConstraints = {
		@UniqueConstraint(columnNames = "username"),
		@UniqueConstraint(columnNames = "email") })
public class Users implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -745904032950867501L;
	private Long id;
	private Long joinedId;
	private String username;
	private String password;
	private String name;
	private String email;
	private Integer access;
	private Integer enabled;
	private Integer deleted;
	private String currency;
	private String colorTheme;
	private Date createdDate;
	private Date modifiedDate;
	private Set<Notification> notificationsForModifiedBy = new HashSet<Notification>(
			0);
	private Set<PaymentMode> paymentModesForModifiedBy = new HashSet<PaymentMode>(
			0);
	private Set<Expense> expensesForCreatedBy = new HashSet<Expense>(0);
	private Set<PaymentMode> paymentModesForCreatedBy = new HashSet<PaymentMode>(
			0);
	private Set<Category> categoriesForModifiedBy = new HashSet<Category>(0);
	private Set<Notification> notificationsForCreatedBy = new HashSet<Notification>(
			0);
	private Set<Category> categoriesForCreatedBy = new HashSet<Category>(0);
	private Set<Budget> budgetsForCreatedBy = new HashSet<Budget>(0);
	private Set<Expense> expensesForModifiedBy = new HashSet<Expense>(0);
	private Set<Budget> budgetsForModifiedBy = new HashSet<Budget>(0);

	public Users() {
	}
	
	public Users(Long id) {
		this.id = id;
	}

	public Users(Long joinedId, String username, String password,
			String name, String email, Integer access, Integer enabled,
			Integer deleted, String currency, String colorTheme,
			Date createdDate, Date modifiedDate,
			Set<Notification> notificationsForModifiedBy,
			Set<PaymentMode> paymentModesForModifiedBy,
			Set<Expense> expensesForCreatedBy,
			Set<PaymentMode> paymentModesForCreatedBy,
			Set<Category> categoriesForModifiedBy,
			Set<Notification> notificationsForCreatedBy,
			Set<Category> categoriesForCreatedBy,
			Set<Budget> budgetsForCreatedBy,
			Set<Expense> expensesForModifiedBy, Set<Budget> budgetsForModifiedBy) {
		this.joinedId = joinedId;
		this.username = username;
		this.password = password;
		this.name = name;
		this.email = email;
		this.access = access;
		this.enabled = enabled;
		this.deleted = deleted;
		this.currency = currency;
		this.colorTheme = colorTheme;
		this.createdDate = createdDate;
		this.modifiedDate = modifiedDate;
		this.notificationsForModifiedBy = notificationsForModifiedBy;
		this.paymentModesForModifiedBy = paymentModesForModifiedBy;
		this.expensesForCreatedBy = expensesForCreatedBy;
		this.paymentModesForCreatedBy = paymentModesForCreatedBy;
		this.categoriesForModifiedBy = categoriesForModifiedBy;
		this.notificationsForCreatedBy = notificationsForCreatedBy;
		this.categoriesForCreatedBy = categoriesForCreatedBy;
		this.budgetsForCreatedBy = budgetsForCreatedBy;
		this.expensesForModifiedBy = expensesForModifiedBy;
		this.budgetsForModifiedBy = budgetsForModifiedBy;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "joined_id")
	public Long getJoinedId() {
		return this.joinedId;
	}

	public void setJoinedId(Long joinedId) {
		this.joinedId = joinedId;
	}

	@Column(name = "username", unique = true, length = 145)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", length = 145)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "name", length = 145)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "email", unique = true, length = 145)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "access")
	public Integer getAccess() {
		return this.access;
	}

	public void setAccess(Integer access) {
		this.access = access;
	}

	@Column(name = "enabled")
	public Integer getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Integer enabled) {
		this.enabled = enabled;
	}

	@Column(name = "deleted")
	public Integer getDeleted() {
		return this.deleted;
	}

	public void setDeleted(Integer deleted) {
		this.deleted = deleted;
	}

	@Column(name = "currency", length = 4)
	public String getCurrency() {
		return this.currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}

	@Column(name = "color_theme", length = 145)
	public String getColorTheme() {
		return this.colorTheme;
	}

	public void setColorTheme(String colorTheme) {
		this.colorTheme = colorTheme;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_by", length = 19)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified_by", length = 19)
	public Date getModifiedDate() {
		return this.modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		this.modifiedDate = modifiedDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifiedBy")
	public Set<Notification> getNotificationsForModifiedBy() {
		return this.notificationsForModifiedBy;
	}

	public void setNotificationsForModifiedBy(
			Set<Notification> notificationsForModifiedBy) {
		this.notificationsForModifiedBy = notificationsForModifiedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifiedBy")
	public Set<PaymentMode> getPaymentModesForModifiedBy() {
		return this.paymentModesForModifiedBy;
	}

	public void setPaymentModesForModifiedBy(
			Set<PaymentMode> paymentModesForModifiedBy) {
		this.paymentModesForModifiedBy = paymentModesForModifiedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedBy")
	public Set<Expense> getExpensesForCreatedBy() {
		return this.expensesForCreatedBy;
	}

	public void setExpensesForCreatedBy(Set<Expense> expensesForCreatedBy) {
		this.expensesForCreatedBy = expensesForCreatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedBy")
	public Set<PaymentMode> getPaymentModesForCreatedBy() {
		return this.paymentModesForCreatedBy;
	}

	public void setPaymentModesForCreatedBy(
			Set<PaymentMode> paymentModesForCreatedBy) {
		this.paymentModesForCreatedBy = paymentModesForCreatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifiedBy")
	public Set<Category> getCategoriesForModifiedBy() {
		return this.categoriesForModifiedBy;
	}

	public void setCategoriesForModifiedBy(Set<Category> categoriesForModifiedBy) {
		this.categoriesForModifiedBy = categoriesForModifiedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedBy")
	public Set<Notification> getNotificationsForCreatedBy() {
		return this.notificationsForCreatedBy;
	}

	public void setNotificationsForCreatedBy(
			Set<Notification> notificationsForCreatedBy) {
		this.notificationsForCreatedBy = notificationsForCreatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedBy")
	public Set<Category> getCategoriesForCreatedBy() {
		return this.categoriesForCreatedBy;
	}

	public void setCategoriesForCreatedBy(Set<Category> categoriesForCreatedBy) {
		this.categoriesForCreatedBy = categoriesForCreatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedBy")
	public Set<Budget> getBudgetsForCreatedBy() {
		return this.budgetsForCreatedBy;
	}

	public void setBudgetsForCreatedBy(Set<Budget> budgetsForCreatedBy) {
		this.budgetsForCreatedBy = budgetsForCreatedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifiedBy")
	public Set<Expense> getExpensesForModifiedBy() {
		return this.expensesForModifiedBy;
	}

	public void setExpensesForModifiedBy(Set<Expense> expensesForModifiedBy) {
		this.expensesForModifiedBy = expensesForModifiedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByModifiedBy")
	public Set<Budget> getBudgetsForModifiedBy() {
		return this.budgetsForModifiedBy;
	}

	public void setBudgetsForModifiedBy(Set<Budget> budgetsForModifiedBy) {
		this.budgetsForModifiedBy = budgetsForModifiedBy;
	}

}
